#!/bin/sh

revision="flash v0.2.0 (2022-10-06 by MIBonk & MIB-Wiki)"
# use --help for more info

export PATH=:/proc/boot:/sbin:/bin:/usr/bin:/usr/sbin:/net/mmx/bin:/net/mmx/usr/bin:/net/mmx/usr/sbin:/net/mmx/sbin:/net/mmx/mnt/app/armle/bin:/net/mmx/mnt/app/armle/sbin:/net/mmx/mnt/app/armle/usr/bin:/net/mmx/mnt/app/armle/usr/sbin
export LD_LIBRARY_PATH=/net/mmx/mnt/app/root/lib-target:/net/mmx/mnt/eso/lib:/net/mmx/eso/lib:/net/mmx/mnt/app/usr/lib:/net/mmx/mnt/app/armle/lib:/net/mmx/mnt/app/armle/lib/dll:/net/mmx/mnt/app/armle/usr/lib
export IPL_CONFIG_DIR=/etc/eso/production

thisname="$(basename $0)"
thisdir="$(dirname $0)"

if [ -z $LOG ]; then
	. $thisdir/../config/GLOBALS
	echo -ne "\n$ME-$thisname---->\n" >> $LOG
fi

if [ -f $TMP/$thisname.mib ] || [ -f $TMP/reboot.mib ]; then
	echo $thisname" or reboot is already running..."
	return 2> /dev/null
fi

function IFSstage2 {

if [ -f "$IFS2" ]; then
	[ -z "$GEM" ] && echo -ne "\033[33m"
	[ -z "$GEM" ] && echo -ne "\n"
	echo -ne "Do NOT power down the unit while flashing!\n"
	echo -ne "Do NOT remove the SD-card/USB stick!\n"
	[ -z "$GEM" ] && echo -ne "You have 10 seconds before flashing will start...\n"
	[ -z "$GEM" ] && echo -ne "\033[31m"
	[ -z "$GEM" ] && echo -ne "\nPress CTRL+C to abort!!!\n\n"
	[ -z "$GEM" ] && echo -ne "\033[00;00m"
	[ -z "$GEM" ] && echo -ne "10 seconds left..."
	COUNTER=9
	while [  $COUNTER -gt -1 ]; do
		sleep 1
		[ -z "$GEM" ] && echo -ne "$COUNTER..."
		let COUNTER=COUNTER-1
	done
	[ -z "$GEM" ] && echo -ne "\033[31m"
	[ -z "$GEM" ] && echo -ne "\n\n"
	echo -ne "Flashing will now start from $OFFSETPART2, this take some minutes."
	[ -z "$GEM" ] && echo -ne "\n"
	echo -ne "\nDO NOT INTERRUPT!\n"
	[ -z "$GEM" ] && echo -ne "\033[00;00m"
	echo -ne "\n" >> $LOG
	/usr/bin/flashunlock >> $LOG
	[ -z "$GEM" ] && echo -ne "\n" | $TEE -i -a $LOG
	[ -z "$GEM" ] && echo -ne "\n" >> $LOG
	trap '' 2
	if [[ "$OFFSETPART2" = "ba0000" ]]; then
		echo -ne "Flashing on OFFSET 0x00"$OFFSETPART2"...\n" | $TEE -i -a $LOG
		/usr/bin/flashit -v -d -a ba0000 -p /net/rcc/dev/fs0 -f $IFS2 >> $LOG
	elif [[ "$OFFSETPART2" = "c20000" ]]; then
		echo -ne "Flashing on OFFSET 0x00"$OFFSETPART2"...\n" | $TEE -i -a $LOG
		/usr/bin/flashit -v -d -a c20000 -p /net/rcc/dev/fs0 -f $IFS2 >> $LOG
	elif [[ "$OFFSETPART2" = "c00000" ]]; then
		echo -ne "Flashing on OFFSET 0x00"$OFFSETPART2"...\n" | $TEE -i -a $LOG
		/usr/bin/flashit -v -d -a c00000 -p /net/rcc/dev/fs0 -f $IFS2 >> $LOG
	elif [[ "$OFFSETPART2" = "be0000" ]]; then
		echo -ne "Flashing on OFFSET 0x00"$OFFSETPART2"...\n" | $TEE -i -a $LOG
		/usr/bin/flashit -v -d -a be0000 -p /net/rcc/dev/fs0 -f $IFS2 >> $LOG
	elif [[ "$OFFSETPART2" = "bc0000" ]]; then
		echo -ne "Flashing on OFFSET 0x00"$OFFSETPART2"...\n" | $TEE -i -a $LOG
		/usr/bin/flashit -v -d -a bc0000 -p /net/rcc/dev/fs0 -f $IFS2 >> $LOG
	else
		/usr/bin/flashlock | $TEE -i -a $LOG
		echo -ne "\nFlash offset invalid, flashing aborted!\n\n" | $TEE -i -a $LOG
		rm -rf $TMP/$thisname.mib 2>/dev/null
		exit 0
	fi
	trap 2
	[ -z "$GEM" ] && echo -ne "\n" | $TEE -i -a $LOG
	/usr/bin/flashlock | $TEE -i -a $LOG
	[ -z "$GEM" ] && echo -ne "\n" | $TEE -i -a $LOG
else
	echo -ne "\nNo Flashfiles there!\n\n" | $TEE -i -a $LOG
	echo -ne "Please check if unit is already patched.\n"
	echo -ne "Patch can only be applied to stock Firmware.\n\n"
	echo -ne "You can go back now...\n"
	rm -rf $TMP/$thisname.mib 2>/dev/null
	exit 0
fi
rm -rf $TMP/$thisname.mib 2>/dev/null

}

	case $1 in

	-p|-patch) {

trap '' 2
	[ -n "$GEM" ] && touch $TMP/$thisname.mib

if [ $ME != "MMX" ]; then
	echo -ne "\nLive patch will only work in MMX bash!\n\n"
	rm -rf $TMP/$thisname.mib 2>/dev/null
	exit 0
fi

. $thisdir/backup -a

if [ ! -f $BACKUPFOLDER/$MUVERSION-EEProm.txt ] || [ ! -f $BACKUPFOLDER/$MUVERSION-RCC_fs0.bin ]; then
	echo -ne "\n" >> $LOG
	echo -ne "Backup is not complete, flashing patch is not save!\nRun backup and try to flash again\n" | $TEE -i -a $LOG
	rm -rf $TMP/$thisname.mib 2>/dev/null
	exit 0
fi

#MUVERSION="MU1234" #debug test

# read Unit DB
. $thisdir/modelconversion -unitdb ${MUVERSION#??}

echo -ne $STAGE2SIZE"\n" #debug output
echo -ne ${UNITDB[15]}"\n" #debug output
echo -ne ${UNITDB[18]}"\n" #debug output
echo -ne ${UNITDB[19]}"\n" #debug output

STAGE2SIZE=${UNITDB[15]} #debug test

if [ $MUNF = 0 ] && [ $STAGE2SIZE = ${UNITDB[15]} ]; then 
	echo -ne "Stock ifs-root-stage2 found on unit\n" | $TEE -i -a $LOG
elif [ $MUNF = 0 ] && [ $STAGE2SIZE = ${UNITDB[18]} ]; then 
	echo -ne "Your unit is already patched with latest M.I.B patch version\nNo need to flash again\nWe will stop here\n" | $TEE -i -a $LOG
	sleep 3
	exit 0
elif [ $MUNF = 0 ]; then
	echo -ne "Your unit has an unknown ifs-root-stage2 patch\nRevert unit back to stock ifs-root-stage2 before continue patching\nWe will stop here\n" | $TEE -i -a $LOG
	echo -ne "You can use the ADVANCED live patch function in GEM on your OWN RISK!\nBetter get in contact with M.I.B team and share your log file and backup\n" | $TEE -i -a $LOG
	sleep 3
	exit 0
fi

IFS2_old=$VOLUME"/patches/"$TRAINVERSION"_"$MUVERSION"_PATCH/"$MUVERSION"-ifs-root-part2-0x00"$OFFSETPART2"-"$STAGE2SIZE".ifs"
IFS2_new=$VOLUME"/patches/ifs-root-part2-0x00"$OFFSETPART2"-"$STAGE2SIZE".ifs"
IFS2_backup=$VOLUME"/backup/"$MUVERSION"-"$TRAINVERSION"-"$FAZIT"/"$MUVERSION"-ifs-root-part2-0x00"$OFFSETPART2".ifs"

if [ -f $IFS2_old ]; then # Checking for "old" pre-made patch files and use them if available
	echo -ne "Legacy patch folder structure detected\nPatch file from /patches/"$TRAINVERSION"_"$MUVERSION"_PATCH/ will be used\n" | $TEE -i -a $LOG
	echo -ne "search file "$MUVERSION-ifs-root-part2-0x00$OFFSETPART2-$STAGE2SIZE.ifs"\n" | $TEE -i -a $LOG
	IFS2=$IFS2_old
elif [ $MUNF = 0 ] && [ -f $IFS2_new ]; then # live-patch like file found on SD card and will be used for patchung. Still, checksum will be checked against DB
	echo -ne "Patch file ifs-root-part2-0x00"$OFFSETPART2"-"$STAGE2SIZE".ifs found\n" | $TEE -i -a $LOG
	checksum_patch="$(/net/rcc/usr/bin/sha1sum $IFS2_new | awk '{print $1}')" 2>> $LOG
	echo -ne $checksum_patch"\n" #debug output
	echo -ne ${UNITDB[19]}"\n" #debug output
	if [[ $checksum_patch = ${UNITDB[19]} ]];then
		echo -ne "File checksum matched with Unit DB\n" | $TEE -i -a $LOG
		echo -ne "IFS file will be used\n" | $TEE -i -a $LOG
		IFS2=$IFS2_new
	else
		echo -ne "Checksum does not match information in Unit DB\n--------------------------\nNo flash will be conducted\n--------------------------\n\n" | $TEE -i -a $LOG
		echo -ne "IFS will be deleted from $VOLUME/patches/\n" | $TEE -i -a $LOG
		rm -f $IFS2_new
		echo -ne "You can use the ADVANCED live patch function in GEM on your OWN RISK!\nBetter get in contact with M.I.B team and share your log file and backup\n" | $TEE -i -a $LOG
		sleep 3
		exit 0
	fi
else
	if [ $MUNF = 0 ] && [ -f $IFS2_backup ]; then # live-patch will be generated from ifs-root-stage2 backup. Both input file checksum and resulting patched file will be checked against DB
		echo -ne "ifs-root-stage2 backup found in backup folder\nNew patch file will be generated on unit now\nThis will take about 2 minutes\n" | $TEE -i -a $LOG
		$VOLUME/apps/sbin/patcher -m ifs -v patch --pattern $VOLUME/mod/patch_pattern/patch_2_3_FEC_CP.pattern $IFS2_backup | $TEE -i -a $LOG #patch command
		echo ${IFS2_backup%????}_patched.ifs
		mv ${IFS2_backup%????}_patched.ifs $IFS2_new 2>> $LOG
		if [ -f $IFS2_new ]; then #Optional: transfer to function and use here and above
			echo -ne "Search File "ifs-root-part2-0x00$OFFSETPART2-$STAGE2SIZE.ifs"\n" | $TEE -i -a $LOG
			echo -ne "Found in folder $VOLUME/patches/\n" | $TEE -i -a $LOG
			echo -ne ${MUVERSION#??}"\n" #debug output
			checksum_patch="$(/net/rcc/usr/bin/sha1sum $IFS2_new | awk '{print $1}')" 2>> $LOG
			echo -ne $checksum_patch"\n" #debug output
			echo -ne ${UNITDB[19]}"\n" #debug output
			if [[ $checksum_patch = ${UNITDB[19]} ]];then
				echo -ne "File checksum matches with Unit DB\n" | $TEE -i -a $LOG
				echo -ne "Patched IFS  will be used\n" | $TEE -i -a $LOG
				IFS2=$IFS2_new
			else
				echo -ne "Checksum does not match information in database\n--------------------------\nNo flash will be conducted\n--------------------------\n\n" | $TEE -i -a $LOG
				echo -ne "Patched IFS will be deleted from $VOLUME/patches/\n" | $TEE -i -a $LOG
				rm -f $IFS2_new
				echo -ne "You can use the ADVANCED live patch function in GEM on your OWN RISK!\nBetter get in contact with M.I.B team and share your log file and backup\n" | $TEE -i -a $LOG
				sleep 3
				exit 0
			fi
		else
			echo -ne "File "ifs-root-part2-0x00$OFFSETPART2-$STAGE2SIZE.ifs" not found.\nSomething is wrong!\n" | $TEE -i -a $LOG
			exit 0
		fi
	else
		[ $MUNF = 0 ] && echo -ne "ifs-root-stage2 backup not found\nNo patched ifs-root-stage2 found\nSomething went wrong\nRun flash once more" | $TEE -i -a $LOG
		[ $MUNF = 1 ] && echo -ne "--------------------------\nNo flash will be conducted\n--------------------------\n\nYou can use the ADVANCED live patch function in GEM on your OWN RISK!\nBetter get in contact with M.I.B team and share your log file and backup to add support for your MU version\n" | $TEE -i -a $LOG
		sleep 5
		exit 0
	fi
fi

echo "Flash starting" #debug output
#IFSstage2

. $thisdir/rccd -d
. $thisdir/fecel -fec
. $thisdir/fecel -el
. $thisdir/reboot -t 10

return 2> /dev/null

	};;


	-r|-restore) {

trap '' 2
	[ -n "$GEM" ] && touch $TMP/$thisname.mib

if [ $ME != "RCC" ]; then
	echo -ne "\nBackup will only work in RCC bash!\n\n"
	rm -rf $TMP/$thisname.mib 2>/dev/null
	exit 0
fi

. $thisdir/offset -log

# flash back to Original...
IFS2=$VOLUME"/backup/"$MUVERSION"-"$TRAINVERSION"-"$FAZIT"/"$MUVERSION"-ifs-root-part2-0x00"$OFFSETPART2".ifs"
echo -ne "search "$FAZIT" Backup File "$MUVERSION"-ifs-root-part2-0x00"$OFFSETPART2".ifs\n" | $TEE -i -a $LOG

echo "Flash debug" #debug output
IFSstage2

. $thisdir/fecel -b
. $thisdir/reboot -t 10

return 2> /dev/null

	};;

	# help or unknown parameter ------------------------------
	*) {
		echo ""
		echo $revision
		echo ""
		echo "Usage: "$thisname" [OPTION]"
		echo ""
		echo "Options:"
		echo "        -p, -patch 		flash patch"
		echo "        -r, -restore 		flash original"
		echo "        --help			show this help"
		echo ""
		echo "Note: Flash will only work in RCC bash!"
		echo ""
		echo "This program is free software; you can redistribute it and/or"
		echo "modify it under the terms of the GNU General Public License"
		echo "as published by the Free Software Foundation; either version 2"
		echo "of the License, or (at your option) any later version."
		echo ""
		echo "This program is distributed in the hope that it will be useful,"
		echo "but WITHOUT ANY WARRANTY; without even the implied warranty of"
		echo "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
		echo "See the GNU General Public License for more details."
		echo ""
		echo "You should have received a copy of the GNU General Public License"
		echo "along with this program; if not, write to the Free Software Foundation,"
		echo "Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA."
		echo ""

	};;

	esac

exit 0
